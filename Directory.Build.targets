<Project>
  <!-- Properties which should be set after the project has been evaluated -->
  <PropertyGroup>
    <PackageOutputPath Condition="'$(IsProductComponent)' == 'true' ">$(ProductPackageOutputPath)</PackageOutputPath>
    <PackageOutputPath Condition="'$(IsProductComponent)' != 'true' ">$(InternalPackageOutputPath)</PackageOutputPath>

    <RuntimeFrameworkVersion Condition=" '$(TargetFramework)' == 'netcoreapp2.0' ">$(MicrosoftNETCoreApp20PackageVersion)</RuntimeFrameworkVersion>
    <RuntimeFrameworkVersion Condition=" '$(TargetFramework)' == 'netcoreapp2.1' ">$(MicrosoftNETCoreAppPackageVersion)</RuntimeFrameworkVersion>
    <NETStandardImplicitPackageVersion Condition=" '$(TargetFramework)' == 'netstandard2.0' ">$(NETStandardLibrary20PackageVersion)</NETStandardImplicitPackageVersion>
  </PropertyGroup>

  <!-- Properties which should be set after the project has been evaluated -->
  <PropertyGroup Condition=" '$(MSBuildProjectExtension)' == '.csproj' ">
    <PackageId Condition=" '$(PackageId)' == '' ">$(AssemblyName)</PackageId>
    <IsPackable Condition="'$(IsPackable)' == '' AND ( '$(IsTestProject)' == 'true' OR '$(IsTestAssetProject)' == 'true' OR '$(IsBenchmarkProject)' == 'true' OR '$(IsSampleProject)' == 'true' ) ">false</IsPackable>
  </PropertyGroup>

  <Import Project="eng\Baseline.props" />

  <PropertyGroup Condition=" '$(IsPackable)' != 'false' AND '$(IsServicingBuild)' == 'true' ">
    <IsPackable>$(PackagesInPatch.Contains(' $(PackageId);'))</IsPackable>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(IsPackable)' != 'true' AND '$(BaselinePackageVersion)' != '' ">
    <!-- This keeps assembly versions consistent across patches. If a package is not included in a patch, its assembly version should stay at the baseline. -->
    <AssemblyVersion>$(BaselinePackageVersion).0</AssemblyVersion>
    <!--
      Ideally, we would also set the project version to match the baseline in case NuGet turns a ProjectReference into a nuspec depenendency, but
      NuGet does not currently handle conflicts between packages and projects which have the same package id/version.

      See https://github.com/NuGet/Home/issues/6795
    -->
    <!-- <Version>$(BaselinePackageVersion)</Version> -->
    <!-- <PackageVersion>$(BaselinePackageVersion)</PackageVersion> -->
  </PropertyGroup>

  <PropertyGroup>
    <!-- Implementation projects are the projects which produce nuget packages or shipping assemblies. -->
    <IsImplementationProject Condition=" '$(IsImplementationProject)' == '' AND '$(IsTestAssetProject)' != 'true' AND '$(IsTestProject)' != 'true' AND '$(IsBenchmarkProject)' != 'true' AND '$(IsSampleProject)' != 'true' ">true</IsImplementationProject>

    <!-- Suppress KoreBuild warnings about the mismatch of repo version and local project version. The versioning in this mega repo is sufficiently complicated that KoreBuild's validation isn't helpful. -->
    <VerifyVersion>false</VerifyVersion>
  </PropertyGroup>

  <Import Project="eng\targets\Packaging.targets" Condition=" '$(MSBuildProjectExtension)' == '.csproj' " />
  <Import Project="eng\targets\ResolveReferences.targets" Condition=" '$(DisableReferenceRestrictions)' != 'true' AND '$(MSBuildProjectExtension)' == '.csproj' " />

    <ItemGroup>
    <PackageReference Include="xunit.runner.console" Version="2.4.1" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" />
    <DistributedTestPlatform Include="Windows10.x64" />
  </ItemGroup>

  <Target Name="CreateTestPayload" Returns="@(TestPayload)">

    <ItemGroup>
      <_TargetFrameworks Remove="@(_TargetFrameworks)" />
      <_TargetFrameworks Include="$(TargetFrameworks);$(TargetFramework)" />
    </ItemGroup>

    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="_CreateTestPayloadInner"
             Properties="TargetFramework=%(_TargetFrameworks.Identity)">
      <Output TaskParameter="TargetOutputs" ItemName="TestPayload" />
    </MSBuild>
  </Target>

  <Target Name="CollectXunitConsoleRunner" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
    <PropertyGroup>
      <XunitConsoleRunnerDir>$([System.IO.Path]::GetDirectoryName($(XunitConsole472Path)))</XunitConsoleRunnerDir>
    </PropertyGroup>

    <ItemGroup>
      <XunitConsoleRunnerFiles Include="$(XunitConsoleRunnerDir)/**/*" />
    </ItemGroup>

    <Copy SourceFiles="@(XunitConsoleRunnerFiles)" DestinationFolder="$(PublishDir)" />
  </Target>

  <!-- TODO: Exclude non test projects and net461 on non windows -->
  <Target Name="_CreateTestPayloadInner" 
    DependsOnTargets="Publish;CollectXunitConsoleRunner" 
    Condition="'$(IsTestProject)' == 'true' AND ('$(HelixTargetQueue)' == 'Windows.10.Amd64.Open' OR '$(TargetFrameworkIdentifier)' != '.NETFramework')" 
    Returns="@(TestPayload)">

    <ConvertToAbsolutePath Paths="$(PublishDir)">
      <Output TaskParameter="AbsolutePaths" PropertyName="PublishAbsoluteDir" />
    </ConvertToAbsolutePath>

    <!-- Windows NetCore -->
    <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework' AND '$(HelixTargetQueue)' == 'Windows.10.Amd64.Open'" >
        <!-- TODO: Clean this up -->
        <_CopyItems Include="$(MSBuildThisFileDirectory)test\vstest\runtests.cmd" />
        <!-- switch to downloading this either before publish or on helix workers -->
        <!-- <_CopyItems Include="$(MSBuildThisFileDirectory)test\vstest\dotnet-install.ps1" /> -->
    </ItemGroup>

    <!-- Windows NetFramework -->
    <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' AND '$(HelixTargetQueue)' == 'Windows.10.Amd64.Open'" >
        <!-- TODO: Clean this up -->
        <_CopyItems Include="$(MSBuildThisFileDirectory)test\xunit\runtests.cmd" />
    </ItemGroup>

    <!-- NonWindows -->
    <ItemGroup Condition="'$(HelixTargetQueue)' != 'Windows.10.Amd64.Open'"  >
        <_CopyItems Include="$(MSBuildThisFileDirectory)test\vstest\runtests.sh" />
    </ItemGroup>

    <Copy SourceFiles="@(_CopyItems)" DestinationFolder="$(PublishAbsoluteDir)" />

    <ItemGroup>
      <PublishDirFiles Include="$(PublishAbsoluteDir)/**/*" />
    </ItemGroup>

    <Copy SourceFiles="@(PublishDirFiles)" DestinationFolder="$(ArtifactsDir)\Helix\$(TargetFramework)\%(RecursiveDir)" />

    <ItemGroup>
      <TestPayload Include="$(PublishAbsoluteDir.TrimEnd('\').TrimEnd('\'))">
        <TestAssembly>$(TargetFileName)</TestAssembly>
        <TestName>$(MSBuildProjectName)/$(TargetFramework)</TestName>
        <!-- Look into how to be able to use $(NETCoreSdkVersion) -->
        <Command Condition="'$(HelixTargetQueue)' == 'Windows.10.Amd64.Open'">%HELIX_CORRELATION_PAYLOAD%\$(TargetFramework)\runtests.cmd %HELIX_CORRELATION_PAYLOAD%\$(TargetFramework)\$(TargetFileName) 2.1.500</Command>
        <Command Condition="'$(HelixTargetQueue)' != 'Windows.10.Amd64.Open'">$HELIX_CORRELATION_PAYLOAD/$(TargetFramework)/runtests.sh $HELIX_CORRELATION_PAYLOAD/$(TargetFramework)/$(TargetFileName) 2.1.500</Command>
        <TestPlatform>%(DistributedTestPlatform.Identity)</TestPlatform>
        <TestTimeout>$(DistributedTestTimeout)</TestTimeout>
      </TestPayload>
    </ItemGroup>
  </Target>

</Project>
