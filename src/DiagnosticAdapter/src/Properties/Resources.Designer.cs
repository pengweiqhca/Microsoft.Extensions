// <auto-generated />
namespace Microsoft.Extensions.DiagnosticAdapter
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.Extensions.DiagnosticAdapter.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// The property '{0}' on type '{1}' must define a getter to support proxy generation.
        /// </summary>
        internal static string Converter_PropertyMustHaveGetter
        {
            get { return GetString("Converter_PropertyMustHaveGetter"); }
        }

        /// <summary>
        /// The property '{0}' on type '{1}' must define a getter to support proxy generation.
        /// </summary>
        internal static string FormatConverter_PropertyMustHaveGetter(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Converter_PropertyMustHaveGetter"), p0, p1);
        }

        /// <summary>
        /// The property '{0}' on type '{1}' must not use index parameters to support proxy generation.
        /// </summary>
        internal static string Converter_PropertyMustNotHaveIndexParameters
        {
            get { return GetString("Converter_PropertyMustNotHaveIndexParameters"); }
        }

        /// <summary>
        /// The property '{0}' on type '{1}' must not use index parameters to support proxy generation.
        /// </summary>
        internal static string FormatConverter_PropertyMustNotHaveIndexParameters(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Converter_PropertyMustNotHaveIndexParameters"), p0, p1);
        }

        /// <summary>
        /// The property '{0}' on type '{1}' must not define a setter to support proxy generation.
        /// </summary>
        internal static string Converter_PropertyMustNotHaveSetter
        {
            get { return GetString("Converter_PropertyMustNotHaveSetter"); }
        }

        /// <summary>
        /// The property '{0}' on type '{1}' must not define a setter to support proxy generation.
        /// </summary>
        internal static string FormatConverter_PropertyMustNotHaveSetter(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Converter_PropertyMustNotHaveSetter"), p0, p1);
        }

        /// <summary>
        /// Type '{0}' must be an interface in order to support proxy generation from source type '{1}'.
        /// </summary>
        internal static string Converter_TypeMustBeInterface
        {
            get { return GetString("Converter_TypeMustBeInterface"); }
        }

        /// <summary>
        /// Type '{0}' must be an interface in order to support proxy generation from source type '{1}'.
        /// </summary>
        internal static string FormatConverter_TypeMustBeInterface(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Converter_TypeMustBeInterface"), p0, p1);
        }

        /// <summary>
        /// Unable to generate a proxy for method '{0}'. See Inner Exception for details.
        /// </summary>
        internal static string Converter_UnableToGenerateProxy
        {
            get { return GetString("Converter_UnableToGenerateProxy"); }
        }

        /// <summary>
        /// Unable to generate a proxy for method '{0}'. See Inner Exception for details.
        /// </summary>
        internal static string FormatConverter_UnableToGenerateProxy(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Converter_UnableToGenerateProxy"), p0);
        }

        /// <summary>
        /// Proxy method generation doesn't support types with properties that vary only by case. The type '{0}' defines multiple properties named '{1}' that vary only by case.
        /// </summary>
        internal static string Converter_TypeMustNotHavePropertiesThatVaryByCase
        {
            get { return GetString("Converter_TypeMustNotHavePropertiesThatVaryByCase"); }
        }

        /// <summary>
        /// Proxy method generation doesn't support types with properties that vary only by case. The type '{0}' defines multiple properties named '{1}' that vary only by case.
        /// </summary>
        internal static string FormatConverter_TypeMustNotHavePropertiesThatVaryByCase(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Converter_TypeMustNotHavePropertiesThatVaryByCase"), p0, p1);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
